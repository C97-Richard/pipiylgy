{"version":3,"file":"js/360.6285798f.js","mappings":"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","sources":["webpack://echarts_test/./src/pages/ylgy.vue","webpack://echarts_test/./node_modules/@babel/runtime/helpers/esm/defineProperty.js","webpack://echarts_test/src/pages/ylgy.vue","webpack://echarts_test/./src/pages/ylgy.vue?e59a","webpack://echarts_test/./src/pages/ylgy.vue?f581"],"sourcesContent":["var render = function render(){var _vm=this,_c=_vm._self._c;return _c('div',{staticClass:\"ylgyContainer\"},[(_vm.step === 0)?_c('div',{staticClass:\"intro\"},[_c('div',[_vm._v(\" 横向卡片最大平铺排数 \"),_c('input',{directives:[{name:\"model\",rawName:\"v-model\",value:(_vm.option.x),expression:\"option.x\"}],attrs:{\"min\":\"2\",\"max\":\"10\",\"type\":\"range\"},domProps:{\"value\":(_vm.option.x)},on:{\"__r\":function($event){return _vm.$set(_vm.option, \"x\", $event.target.value)}}}),_vm._v(\" \"+_vm._s(_vm.option.x)+\" \")]),_c('div',[_vm._v(\" 纵向卡片最大平铺排数 \"),_c('input',{directives:[{name:\"model\",rawName:\"v-model\",value:(_vm.option.y),expression:\"option.y\"}],attrs:{\"min\":\"2\",\"max\":\"10\",\"type\":\"range\"},domProps:{\"value\":(_vm.option.y)},on:{\"__r\":function($event){return _vm.$set(_vm.option, \"y\", $event.target.value)}}}),_vm._v(\" \"+_vm._s(_vm.option.y)+\" \")]),_c('div',[_vm._v(\" 卡片最大堆叠层数 \"),_c('input',{directives:[{name:\"model\",rawName:\"v-model\",value:(_vm.option.z),expression:\"option.z\"}],attrs:{\"min\":\"2\",\"max\":\"10\",\"type\":\"range\"},domProps:{\"value\":(_vm.option.z)},on:{\"__r\":function($event){return _vm.$set(_vm.option, \"z\", $event.target.value)}}}),_vm._v(\" \"+_vm._s(_vm.option.z)+\" \")]),_c('div',[_vm._v(\" 卡片密度 \"),_c('input',{directives:[{name:\"model\",rawName:\"v-model\",value:(_vm.option.cardRandom),expression:\"option.cardRandom\"}],attrs:{\"min\":\"0\",\"max\":\"1\",\"step\":\"0.1\",\"type\":\"range\"},domProps:{\"value\":(_vm.option.cardRandom)},on:{\"__r\":function($event){return _vm.$set(_vm.option, \"cardRandom\", $event.target.value)}}}),_vm._v(\" \"+_vm._s(_vm.option.cardRandom)+\" \")]),_c('div',[_vm._v(\" 最大卡片种类 \"),_c('input',{directives:[{name:\"model\",rawName:\"v-model\",value:(_vm.option.maxCardType),expression:\"option.maxCardType\"}],attrs:{\"min\":\"3\",\"max\":\"14\",\"step\":\"1\",\"type\":\"range\"},domProps:{\"value\":(_vm.option.maxCardType)},on:{\"__r\":function($event){return _vm.$set(_vm.option, \"maxCardType\", $event.target.value)}}}),_vm._v(\" \"+_vm._s(_vm.option.maxCardType)+\" \")]),_c('br'),_c('button',{on:{\"click\":_vm.startGame}},[_vm._v(\"开始游戏\")])]):(_vm.step === 2)?_c('div',{staticClass:\"intro\"},[_c('h1',[_vm._v(_vm._s(_vm.result ? \"You Win！🎉\" : \"You Lose!😢\"))]),_c('button',{on:{\"click\":_vm.rePlay}},[_vm._v(\"再来一轮\")]),_c('button',{on:{\"click\":_vm.setGame}},[_vm._v(\"难度调节\")])]):_c('div',{staticClass:\"box\"},[_c('div',{staticClass:\"card-wrap\",style:(_vm.cardWrapStyle)},[_vm._l((_vm.cardItemList),function(item){return _c('div',{key:item.key,staticClass:\"card-item\",class:{'item-cover': item.cover},style:(item.style),on:{\"click\":function($event){return _vm.clickCard(item)}}},[_vm._v(\" \"+_vm._s(item.content)+\" \")])}),_vm._l((_vm.penddingList),function(item){return _c('div',{key:item.key,staticClass:\"card-item\",style:(item.style)},[_vm._v(\" \"+_vm._s(item.content)+\" \")])}),_vm._l((_vm.clearList),function(item){return _c('div',{key:item.key,staticClass:\"card-item clear-item\",style:(item.style)},[_vm._v(\" \"+_vm._s(item.content)+\" \")])}),_vm._l((_vm.saveList),function(item){return _c('div',{key:item.key,staticClass:\"card-item\",style:(item.style),on:{\"click\":function($event){return _vm.clickSaveCard(item)}}},[_vm._v(\" \"+_vm._s(item.content)+\" \")])}),_c('p',{staticClass:\"card-tips\"},[_vm._v(\" 剩余空位:\"+_vm._s(7 - _vm.penddingList.length)+\"/7；已消除:\"+_vm._s(_vm.clearList.length)+\"/\"+_vm._s(_vm.cardItemList.length + _vm.penddingList.length + _vm.saveList.length + _vm.clearList.length)+\" \")])],2),_c('div',{staticClass:\"tools\"},[_vm._v(\" 道具： \"),_c('button',{attrs:{\"disabled\":!_vm.tools.save},on:{\"click\":_vm.saveCard}},[_vm._v(\"取出3个卡片\")]),_c('button',{attrs:{\"disabled\":!_vm.tools.rand},on:{\"click\":_vm.randCard}},[_vm._v(\"随机\")]),_c('button',{on:{\"click\":_vm.rePlay}},[_vm._v(\"再来一轮\")])])])])\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","<template>\r\n<div class=\"ylgyContainer\">\r\n    <div v-if=\"step === 0\" class=\"intro\">\r\n        <div>\r\n            横向卡片最大平铺排数\r\n            <input\r\n                v-model=\"option.x\" min=\"2\"\r\n                max=\"10\" type=\"range\"\r\n            > {{ option.x }}\r\n        </div>\r\n        <div>\r\n            纵向卡片最大平铺排数\r\n            <input\r\n                v-model=\"option.y\" min=\"2\"\r\n                max=\"10\" type=\"range\"\r\n            > {{ option.y }}\r\n        </div>\r\n        <div>\r\n            卡片最大堆叠层数\r\n            <input\r\n                v-model=\"option.z\" min=\"2\"\r\n                max=\"10\" type=\"range\"\r\n            > {{ option.z }}\r\n        </div>\r\n        <div>\r\n            卡片密度\r\n            <input\r\n                v-model=\"option.cardRandom\" min=\"0\"\r\n                max=\"1\" step=\"0.1\"\r\n                type=\"range\"\r\n            >\r\n            {{ option.cardRandom }}\r\n        </div>\r\n        <div>\r\n            最大卡片种类\r\n            <input\r\n                v-model=\"option.maxCardType\" min=\"3\"\r\n                max=\"14\" step=\"1\"\r\n                type=\"range\"\r\n            >\r\n            {{ option.maxCardType }}\r\n        </div>\r\n        <br>\r\n        <button @click=\"startGame\">开始游戏</button>\r\n    </div>\r\n    <div v-else-if=\"step === 2\" class=\"intro\">\r\n        <h1>{{ result ? \"You Win！🎉\" : \"You Lose!😢\" }}</h1>\r\n        <button @click=\"rePlay\">再来一轮</button>\r\n        <button @click=\"setGame\">难度调节</button>\r\n    </div>\r\n    <div v-else class=\"box\">\r\n        <div class=\"card-wrap\" :style=\"cardWrapStyle\">\r\n            <div v-for=\"item in cardItemList\" :key=\"item.key\" :class=\"{'item-cover': item.cover}\" class=\"card-item\"\r\n                :style=\"item.style\" @click=\"clickCard(item)\">\r\n                {{ item.content }}\r\n            </div>\r\n            <div v-for=\"item in penddingList\" :key=\"item.key\" class=\"card-item\" :style=\"item.style\">\r\n                {{ item.content }}\r\n            </div>\r\n            <div v-for=\"item in clearList\" :key=\"item.key\" class=\"card-item clear-item\" :style=\"item.style\">\r\n                {{ item.content }}\r\n            </div>\r\n            <div v-for=\"item in saveList\" :key=\"item.key\" class=\"card-item\" :style=\"item.style\"\r\n                @click=\"clickSaveCard(item)\">\r\n                {{ item.content }}\r\n            </div>\r\n            <p class=\"card-tips\">\r\n                剩余空位:{{ 7 - penddingList.length }}/7；已消除:{{ clearList.length }}/{{\r\n                cardItemList.length + penddingList.length + saveList.length + clearList.length\r\n                }}\r\n            </p>\r\n        </div>\r\n        <div class=\"tools\">\r\n            道具：\r\n            <button :disabled=\"!tools.save\" @click=\"saveCard\">取出3个卡片</button>\r\n            <button :disabled=\"!tools.rand\" @click=\"randCard\">随机</button>\r\n            <button @click=\"rePlay\">再来一轮</button>\r\n        </div>\r\n    </div>\r\n</div>\r\n</template>\r\n\r\n<script>\r\nclass CardItem {\r\n    static x = 20;\r\n    static y = 21;\r\n    static colorType = {\r\n        1: {background: '#FFB7DD'},\r\n        2: {background: '#FFCCCC'},\r\n        3: {background: '#FFC8B4'},\r\n        4: {background: '#FFDDAA'},\r\n        5: {background: '#FFEE99'},\r\n        6: {background: '#FFFFBB'},\r\n        7: {background: '#EEFFBB'},\r\n        8: {background: '#CCFF99'},\r\n        9: {background: '#99FF99'},\r\n        10: {background: '#BBFFEE'},\r\n        11: {background: '#AAFFEE'},\r\n        12: {background: '#99FFFF'},\r\n        13: {background: '#CCEEFF'},\r\n        14: {background: '#CCDDFF'}\r\n    };\r\n    static contentType = {\r\n        1: '🥕',\r\n        2: '✂️',\r\n        3: '🥦',\r\n        4: '🥛',\r\n        5: '🌊',\r\n        6: '🧤',\r\n        7: '🧵',\r\n        8: '🌱',\r\n        9: '🔨',\r\n        10: '🌽',\r\n        11: '🌾',\r\n        12: '🐑',\r\n        13: '🪵',\r\n        14: '🔥'\r\n    };\r\n    constructor({x, y, z, key}) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.z = z;\r\n        this.key = key;\r\n        const offset = z * 0;\r\n        this.val = key;\r\n        this.style = {\r\n            top: y * CardItem.y + offset + 'px',\r\n            left: x * CardItem.x + offset + 'px',\r\n            width: CardItem.x * 2 - 2 + 'px',\r\n            height: CardItem.y * 2 - 8 + 'px'\r\n        };\r\n    }\r\n\r\n    setValue(val) {\r\n        this.val = val;\r\n        this.content = CardItem.contentType[val];\r\n        Object.assign(this.style, CardItem.colorType[val]);\r\n    }\r\n}\r\n\r\nexport default {\r\n    data() {\r\n        return {\r\n            option: {\r\n                x: 6,\r\n                y: 4,\r\n                z: 8,\r\n                cardRandom: 0.2,\r\n                maxCardType: 11\r\n            },\r\n            step: 0,\r\n            win: false,\r\n            cardMap: [],\r\n            cardItemList: [],\r\n            penddingList: [],\r\n            clearList: [],\r\n            saveList: [],\r\n            calcValueList: [],\r\n            xUnit: 0,\r\n            yUnit: 0,\r\n            tools: {\r\n                save: true,\r\n                rand: true\r\n            },\r\n            timer: 0\r\n        };\r\n    },\r\n    computed: {\r\n        cardWrapStyle() {\r\n            return {\r\n                width: (this.xUnit + 2) * CardItem.x + 'px',\r\n                height: (this.yUnit + 1) * CardItem.y + 'px'\r\n            };\r\n        },\r\n        leftOffset() {\r\n            const wrapWidth = (this.xUnit + 2) * CardItem.x;\r\n            return (wrapWidth - 7 * CardItem.x * 2) / 2;\r\n        }\r\n    },\r\n    methods: {\r\n        randCard() {\r\n            if (!this.tools.rand) {\r\n                return;\r\n            }\r\n            this.tools.rand = false;\r\n            const length = this.cardItemList.length;\r\n            this.cardItemList.forEach(item => {\r\n                const randNum = Math.floor(length * Math.random());\r\n                const newItem = this.cardItemList[randNum];\r\n                let temp;\r\n                temp = item.style.left;\r\n                item.style.left = newItem.style.left;\r\n                newItem.style.left = temp;\r\n                temp = item.style.top;\r\n                item.style.top = newItem.style.top;\r\n                newItem.style.top = temp;\r\n                temp = item.x;\r\n                item.x = newItem.x;\r\n                newItem.x = temp;\r\n                temp = item.y;\r\n                item.y = newItem.y;\r\n                newItem.y = temp;\r\n                temp = item.z;\r\n                item.z = newItem.z;\r\n                newItem.z = temp;\r\n            });\r\n\r\n            this.cardItemList.sort((a, b) => a.z - b.z);\r\n            this.calcCover();\r\n        },\r\n        saveCard() {\r\n            if (!this.tools.save) {\r\n                return false;\r\n            }\r\n            this.tools.save = false;\r\n            this.saveList = this.penddingList.slice(0, 3);\r\n            setTimeout(() => {\r\n                this.saveList.forEach((item, index) => {\r\n                    item.style.top = '110%';\r\n                    item.style.left = this.leftOffset + index * CardItem.x * 2 + 'px';\r\n                    this.calcValueList[item.val]--;\r\n                });\r\n            }, 0);\r\n            this.penddingList = this.penddingList.slice(3);\r\n            this.penddingList.forEach((item, index) => {\r\n                item.style.top = '160%';\r\n                item.style.left = this.leftOffset + index * CardItem.x * 2 + 'px';\r\n            });\r\n        },\r\n        initGame() {\r\n            this.step = 1;\r\n            this.getMap(this.option);\r\n            this.penddingList = [];\r\n            this.clearList = [];\r\n            this.saveList = [];\r\n            this.tools.save = true;\r\n            this.tools.rand = true;\r\n            this.setCardValue({maxCardType: Number(this.option.maxCardType)});\r\n            this.calcCover();\r\n        },\r\n\r\n        initGameMap({x, y, z}){\r\n            this.xUnit = x * 2;\r\n            this.yUnit = y * 2;\r\n            const cardMap = new Array(z);\r\n            // 地图初始化\r\n            for (let k = 0; k < z; k++) {\r\n                cardMap[k] = new Array(this.yUnit);\r\n                for (let i = 0; i < this.yUnit; i++) {\r\n                    cardMap[k][i] = new Array(this.xUnit).fill(0);\r\n                }\r\n            }\r\n            return cardMap\r\n        },\r\n        // 表示地图最大为 x * y 张牌，最多有 z 层\r\n        getMap({x, y, z, cardRandom} = {}) {\r\n            const cardMap = this.initGameMap({x, y, z});\r\n            const cardItemList = [];\r\n            let key = 0;\r\n            for (let k = 0; k < z; k++) {\r\n                const shrinkSpeed = 3\r\n                const shrink = Math.floor((z - k - 1) / shrinkSpeed);\r\n                const shrinkX = Math.min(Math.floor(this.xUnit / 2) - 2, shrink);\r\n                const shrinkY = Math.min(Math.floor(this.yUnit / 2) - 2, shrink);\r\n                // 行\r\n                for (let i = shrinkY; i < this.yUnit - 1 - shrinkY; i++) {\r\n                    // 列\r\n                    for (let j = shrinkX; j < Math.ceil((this.xUnit - 1) / 2); j++) {\r\n                        let canSetCard = true;\r\n                        if (j > 0 && cardMap[k][i][j - 1]) {\r\n                            // 左边不能有牌\r\n                            canSetCard = false;\r\n                        }\r\n                        else if (i > 0 && cardMap[k][i - 1][j]) {\r\n                            // 上边不能有牌\r\n                            canSetCard = false;\r\n                        }\r\n                        else if (i > 0 && j > 0 && cardMap[k][i - 1][j - 1]) {\r\n                            // 左上不能有牌\r\n                            canSetCard = false;\r\n                        }\r\n                        else if (i > 0 && cardMap[k][i - 1][j + 1]) {\r\n                            // 右上不能有牌\r\n                            canSetCard = false;\r\n                        }\r\n                        else if (k > 0 && cardMap[k - 1][i][j]) {\r\n                            // 正底不能有牌\r\n                            canSetCard = false;\r\n                        }\r\n                        else if (Math.random() >= cardRandom) {\r\n                            canSetCard = false;\r\n                        }\r\n                        if (canSetCard) {\r\n                            key++;\r\n                            const cardItem = new CardItem({x: j, y: i, z: k, key});\r\n                            cardMap[k][i][j] = cardItem;\r\n                            cardItemList.push(cardItem);\r\n                            // 对称放置\r\n                            const mirrorX = this.xUnit - 2 - j;\r\n                            if (mirrorX > j) {\r\n                                key++;\r\n                                const cardItem = new CardItem({\r\n                                    x: mirrorX,\r\n                                    y: i,\r\n                                    z: k,\r\n                                    key\r\n                                });\r\n                                cardMap[k][i][mirrorX] = cardItem;\r\n                                cardItemList.push(cardItem);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            cardItemList.reverse();\r\n            for (let i = 1; i <= key % 3; i++) {\r\n                const clearItem = cardItemList.pop();\r\n                cardMap[clearItem.z][clearItem.y][clearItem.x] = 0;\r\n            }\r\n            cardItemList.reverse();\r\n            this.cardMap = cardMap;\r\n            this.cardItemList = cardItemList;\r\n        },\r\n        setCardValue({maxCardType} = {}) {\r\n            // 卡片种类\r\n            const valStack = new Array(maxCardType);\r\n            this.calcValueList = new Array(maxCardType + 1).fill(0);\r\n            // 给卡片设置值\r\n            this.cardItemList.forEach(item => {\r\n                const value = Math.ceil(Math.random() * maxCardType);\r\n                if (valStack[value]) {\r\n                    valStack[value].push(item);\r\n                    if (valStack[value].length === 3) {\r\n                        valStack[value].forEach(item => {\r\n                            item.setValue(value);\r\n                        });\r\n                        valStack[value] = null;\r\n                    }\r\n                }\r\n                else {\r\n                    valStack[value] = [item];\r\n                }\r\n            });\r\n\r\n            let count = 2;\r\n            valStack.forEach(list => {\r\n                list\r\n                    && list.forEach(item => {\r\n                        count++;\r\n                        item.setValue(Math.floor(count / 3));\r\n                    });\r\n            });\r\n        },\r\n        // 计算遮挡关系\r\n        calcCover() {\r\n            // 构建一个遮挡 map\r\n            const coverMap = new Array(this.yUnit);\r\n            for (let i = 0; i <= this.yUnit; i++) {\r\n                coverMap[i] = new Array(this.xUnit).fill(false);\r\n            }\r\n\r\n            // 从后往前，后面的层数高\r\n            for (let i = this.cardItemList.length - 1; i >= 0; i--) {\r\n                const item = this.cardItemList[i];\r\n                const {x, y, z} = item;\r\n                if (coverMap[y][x]) {\r\n                    item.cover = true;\r\n                }\r\n                else if (coverMap[y][x + 1]) {\r\n                    item.cover = true;\r\n                }\r\n                else if (coverMap[y + 1][x]) {\r\n                    item.cover = true;\r\n                }\r\n                else if (coverMap[y + 1][x + 1]) {\r\n                    item.cover = true;\r\n                }\r\n                else {\r\n                    item.cover = false;\r\n                }\r\n                coverMap[y][x] = true;\r\n                coverMap[y + 1][x] = true;\r\n                coverMap[y][x + 1] = true;\r\n                coverMap[y + 1][x + 1] = true;\r\n            }\r\n        },\r\n        clickSaveCard(item) {\r\n            this.cardItemList.push(item);\r\n            const index = this.saveList.indexOf(item);\r\n            this.saveList = this.saveList\r\n                .slice(0, index)\r\n                .concat(this.saveList.slice(index + 1));\r\n            this.clickCard(item);\r\n        },\r\n        removeThree() {\r\n            this.penddingList.some(item => {\r\n                if (this.calcValueList[item.val] === 3) {\r\n                    this.penddingList.forEach(newItem => {\r\n                        if (newItem.val === item.val) {\r\n                            this.clearList.push(newItem);\r\n                        }\r\n                    });\r\n                    setTimeout(() => {\r\n                        this.clearList.forEach((item, index) => {\r\n                            item.style.left = this.leftOffset - 60 + 'px';\r\n                        });\r\n                    }, 300);\r\n\r\n                    this.penddingList = this.penddingList.filter(newItem => {\r\n                        return newItem.val !== item.val;\r\n                    });\r\n                    this.penddingList.forEach((item, index) => {\r\n                        item.style.top = '160%';\r\n                        item.style.left = this.leftOffset + index * CardItem.x * 2 + 'px';\r\n                    });\r\n                    this.calcValueList[item.val] = 0;\r\n                    if (this.cardItemList.length === 0) {\r\n                        this.step = 2;\r\n                        this.result = true;\r\n                    }\r\n                }\r\n            });\r\n\r\n            if (this.penddingList.length >= 7) {\r\n                this.step = 2;\r\n                this.result = false;\r\n            }\r\n        },\r\n        // 点击卡片\r\n        clickCard(item) {\r\n            clearTimeout(this.timer);\r\n            this.removeThree();\r\n            this.penddingList.push(item);\r\n            const index = this.cardItemList.indexOf(item);\r\n            this.cardItemList = this.cardItemList\r\n                .slice(0, index)\r\n                .concat(this.cardItemList.slice(index + 1));\r\n            this.calcCover();\r\n            this.calcValueList[item.val]++;\r\n            setTimeout(() => {\r\n                item.style.top = '160%';\r\n                item.style.left\r\n                    = this.leftOffset + (this.penddingList.length - 1) * CardItem.x * 2 + 'px';\r\n            }, 0);\r\n\r\n            this.timer = setTimeout(() => {\r\n                this.removeThree();\r\n            }, 500);\r\n        },\r\n        // 开始\r\n        startGame() {\r\n            this.initGame();\r\n        },\r\n        // 设置\r\n        setGame() {\r\n            this.step = 0;\r\n        },\r\n        // 重来\r\n        rePlay() {\r\n            this.initGame();\r\n        }\r\n    }\r\n};\r\n</script>\r\n\r\n<style>\r\n.ylgyContainer{\r\n    overflow: hidden;\r\n    margin: 0;\r\n    padding: 0;\r\n    width: 100%;\r\n    height: 100vh;\r\n    background-image: url(../assets/bigBg.jpg);\r\n    background-size:contain;\r\n    color: #fff;\r\n}\r\n    .box {\r\n        position: relative;\r\n    }\r\n\r\n    .intro {\r\n        margin: 10% auto 0 auto;\r\n        text-align: center;\r\n    }\r\n\r\n    .card-wrap {\r\n        position: relative;\r\n        margin: 10% auto 0 auto;\r\n    }\r\n\r\n    .card-item {\r\n        font-size: 28px;\r\n        text-align: center;\r\n        position: absolute;\r\n        border-radius: 2px;\r\n        box-sizing: border-box;\r\n        background: #ddd;\r\n        opacity: 1;\r\n        cursor: pointer;\r\n        transition: all 0.3s;\r\n        box-shadow: 0px 3px 0 0 #fff, 0 8px 0 0 #ddd, 0 8px 0 2px #333, 0 0 0 2px #333;\r\n    }\r\n\r\n    .card-item:hover {\r\n        transform: scale3d(1.1, 1.1, 1.1);\r\n        z-index: 1;\r\n    }\r\n\r\n    .item-cover {\r\n        pointer-events: none;\r\n        box-shadow: 0px 3px 0 0 #999, 0 8px 0 0 #666, 0 8px 0 2px #000, 0 0 0 2px #000;\r\n    }\r\n\r\n    .item-cover:after {\r\n        border-radius: 2px;\r\n        content: \"\";\r\n        position: absolute;\r\n        width: 100%;\r\n        height: 100%;\r\n        left: 0;\r\n        top: 0;\r\n        background: #000;\r\n        opacity: 0.55;\r\n    }\r\n\r\n    .card-tips {\r\n        white-space: nowrap;\r\n        position: absolute;\r\n        left: 50%;\r\n        top: 130%;\r\n        transform: translate(-50%, 0);\r\n        pointer-events: none;\r\n    }\r\n\r\n    .tools {\r\n        position: absolute;\r\n        top: 200%;\r\n        width: 100%;\r\n        left: 0;\r\n        text-align: center;\r\n    }\r\n\r\n    .clear-item {\r\n        pointer-events: none;\r\n    }\r\n</style>","import mod from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../node_modules/@vue/cli-service/node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./ylgy.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../node_modules/@vue/cli-service/node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./ylgy.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./ylgy.vue?vue&type=template&id=6a974407&\"\nimport script from \"./ylgy.vue?vue&type=script&lang=js&\"\nexport * from \"./ylgy.vue?vue&type=script&lang=js&\"\nimport style0 from \"./ylgy.vue?vue&type=style&index=0&id=6a974407&prod&lang=css&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/@vue/cli-service/node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports"],"names":["render","_vm","this","_c","_self","staticClass","step","_v","directives","name","rawName","value","option","x","expression","attrs","domProps","on","$event","$set","target","_s","y","z","cardRandom","maxCardType","startGame","result","rePlay","setGame","style","cardWrapStyle","_l","cardItemList","item","key","class","cover","clickCard","content","penddingList","clearList","saveList","clickSaveCard","length","tools","save","saveCard","rand","randCard","staticRenderFns","_defineProperty","obj","Object","defineProperty","enumerable","configurable","writable","CardItem","constructor","top","left","width","height","setValue","background","data","win","cardMap","calcValueList","xUnit","yUnit","timer","computed","leftOffset","methods","temp","newItem","setTimeout","initGame","initGameMap","getMap","canSetCard","setCardValue","valStack","list","count","calcCover","coverMap","slice","index","concat","removeThree","clearTimeout","component"],"sourceRoot":""}